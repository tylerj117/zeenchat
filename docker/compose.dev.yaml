services:
  server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    env_file:
      - .env
    ports:
      - '8000:8000'
    volumes:
      - static-vol:/app/static
      - media-vol:/app/media
    networks:
      - appNet
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  redis:
    image: redis:${REDIS_IMAGE_TAG:-7.4.2-alpine}
    # volumes:
    #   - ../redis/conf:/usr/local/etc/redis
    # command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:?password not set!}
    command: redis-server --requirepass ${REDIS_PASSWORD:?password not set!}
    container_name: ${REDIS_HOSTNAME:-redis}
    hostname: ${REDIS_HOSTNAME:-redis}
    networks:
      - appNet
    expose:
      - '${REDIS_PORT:-6379}'

  db:
    image: postgres:${DB_IMAGE_TAG:-17.2-alpine}
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME:-AppDatabase}
      POSTGRES_USER: ${DB_USER:-appuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?password not set!}
      POSTGRES_HOST: ${DB_HOST:-db}
      POSTGRES_PORT: ${DB_PORT:-5432}
    networks:
      - appNet
    expose:
      - '${DB_PORT:-5432}'
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

#  nginx:
#    image: nginx${PROXY_IMAGE_TAG:-latest}
#    ports:
#      - "80:80"
#    env_file:
#      - .env
#    volumes:
#      - ../nginx/custom-nginx.conf:/etc/nginx/conf.d/default.conf
#      - static-vol:/app/static
#      - media-vol:/app/media
#    depends_on:
#      - server
#    networks:
#      - appNet
#        - tunnelNet  # Cloudflared tunnel network

volumes:
  db-data:
  static-vol:
  media-vol:
networks:
  appNet:
    driver: bridge
  # tunnelNet:
  #   external: true

